{"version":3,"sources":["components/sprint-data.js","components/SprintPlanChart.js","components/CreateSprintDialog.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["sprint_data","type","id","Date","SprintPlanChart","react_default","a","createElement","index_esm","width","height","chartType","loader","data","sprintData","options","timeline","groupByRowLabel","hAxis","format","rootProps","data-testid","React","PureComponent","CreateSprintDialog","Dialog","open","this","props","onClose","handleClose","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","margin","label","fullWidth","DialogActions","Button","onClick","handleCancel","color","handleSave","Component","Dashboard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","openCreateSprintDialog","onAddClick","bind","assertThisInitialized","setState","classes","console","log","root","className","AppBar","position","Toolbar","Typography","variant","Grid","container","spacing","Fab","aria-label","fabButton","Add_default","item","xs","alignItems","justify","direction","Paper","paper","SprintPlanChart_SprintPlanChart","CreateSprintDialog_CreateSprintDialog","withStyles","_ref","palette","flexGrow","zIndex","top","right","padding","textAlign","text","secondary","App","components_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAAeA,EAAA,CACC,CACI,CAAEC,KAAM,SAAUC,GAAI,UACtB,CAAED,KAAM,SAAUC,GAAI,SACtB,CAAED,KAAM,OAAQC,GAAI,SACpB,CAAED,KAAM,OAAQC,GAAI,QAExB,CAAC,UAAW,WAAW,IAAIC,KAAK,KAAK,EAAE,IAAK,IAAIA,KAAK,KAAK,EAAE,KAC5D,CAAC,QAAS,WAAW,IAAIA,KAAK,KAAK,EAAE,IAAK,IAAIA,KAAK,KAAK,EAAE,KAC1D,CAAC,aAAc,WAAW,IAAIA,KAAK,KAAK,EAAE,IAAK,IAAIA,KAAK,KAAK,EAAE,KAC/D,CAAC,aAAc,WAAW,IAAIA,KAAK,KAAK,EAAE,IAAK,IAAIA,KAAK,KAAK,EAAE,KAC/D,CAAC,UAAW,WAAW,IAAIA,KAAK,KAAK,EAAE,IAAK,IAAIA,KAAK,KAAK,EAAE,KAC5D,CAAC,aAAc,WAAW,IAAIA,KAAK,KAAK,EAAE,IAAK,IAAIA,KAAK,KAAK,EAAE,KAC/D,CAAC,SAAU,WAAW,IAAIA,KAAK,KAAK,EAAE,IAAK,IAAIA,KAAK,KAAK,EAAE,KAC3D,CAAC,SAAU,WAAW,IAAIA,KAAK,KAAK,EAAE,IAAK,IAAIA,KAAK,KAAK,EAAE,KAC3D,CAAC,QAAS,WAAW,IAAIA,KAAK,KAAK,EAAE,IAAK,IAAIA,KAAK,KAAK,EAAE,KAC1D,CAAC,aAAc,WAAW,IAAIA,KAAK,KAAK,EAAE,IAAK,IAAIA,KAAK,KAAK,EAAE,KAC/D,CAAC,OAAQ,WAAW,IAAIA,KAAK,KAAK,EAAE,IAAK,IAAIA,KAAK,KAAK,EAAE,MCbpDC,mLAEb,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACHC,MAAO,SACPC,OAAQ,QACRC,UAAU,WACVC,OAAQP,EAAAC,EAAAC,cAAA,4BACRM,KAAMC,EACNC,QAAS,CACLC,SAAU,CAAEC,iBAAiB,GAC7BC,MAAO,CACHC,OAAQ,OAEZV,MAAO,MAEXW,UAAW,CAAEC,cAAe,cAfKC,IAAMC,iJCI9BC,mLAEb,OACInB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQC,KAAMC,KAAKC,MAAMF,KAAMG,QAASF,KAAKC,MAAME,YAAaC,kBAAgB,qBAC5E1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAa9B,GAAG,qBAAhB,aACAG,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACI5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPlC,GAAG,aACHmC,MAAM,cACNC,WAAS,KAGjBjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACIlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAQC,QAASd,KAAKC,MAAMc,aAAcC,MAAM,WAAhD,UAGAtC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAQC,QAASd,KAAKC,MAAMgB,WAAYD,MAAM,WAA9C,kBAnBwBrB,IAAMuB,WCuBhDC,cACF,SAAAA,EAAYlB,GAAM,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArB,KAAAmB,IACdC,EAAAC,OAAAE,EAAA,EAAAF,CAAArB,KAAAqB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAzB,KAAMC,KACDyB,MAAQ,CAAEC,wBAAwB,GACvCP,EAAKQ,WAAaR,EAAKQ,WAAWC,KAAhBR,OAAAS,EAAA,EAAAT,CAAAD,IAClBA,EAAKL,aAAeK,EAAKL,aAAac,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IACpBA,EAAKH,WAAaG,EAAKH,WAAWY,KAAhBR,OAAAS,EAAA,EAAAT,CAAAD,IALJA,4EASdpB,KAAK+B,SAAU,CAAEJ,wBAAwB,2CAIzC3B,KAAK+B,SAAU,CAAEJ,wBAAwB,yCAKzC3B,KAAK+B,SAAU,CAAEJ,wBAAwB,qCAGpC,IACGK,EAAYhC,KAAKC,MAAjB+B,QAER,OADAC,QAAQC,IAAIF,EAAQG,MACbzD,EAAAC,EAAAC,cAAA,OAAKwD,UAAWJ,EAAQG,MAC3BzD,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAQC,SAAS,SAAStB,MAAM,WAC5BtC,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,KACI7D,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAYC,QAAQ,KAAKzB,MAAM,WAA/B,oBAMRtC,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrBlE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAAK7B,MAAM,YAAY8B,aAAW,MAAMhC,QAASd,KAAK4B,WAAYQ,UAAWJ,EAAQe,WACjFrE,EAAAC,EAAAC,cAACoE,EAAArE,EAAD,OAGJD,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,GAAIC,WAAY,SAAUC,QAAQ,SAASC,UAAU,OAChE3E,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CAAOlB,UAAWJ,EAAQuB,OACtB7E,EAAAC,EAAAC,cAAC4E,EAAD,SAKZ9E,EAAAC,EAAAC,cAAC6E,EAAD,CACI1D,KAAMC,KAAK0B,MAAMC,uBACjBZ,aAAcf,KAAKe,aACnBE,WAAYjB,KAAKiB,qBAjDTtB,IAAMuB,WAuDfwC,cA1EK,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,MAA2B,CAC3CzB,KAAM,CACF0B,SAAU,GAEdd,UAAW,CACPT,SAAU,WACVwB,OAAQ,EACRC,IAAK,GACLC,MAAO,GACPvD,OAAQ,UAEZ8C,MAAO,CACHU,SAASrB,EAZGe,EAAYf,SAYP,GACjBsB,UAAW,SACXlD,MAAO4C,EAAQO,KAAKC,UACpB3D,OAAQ,MA2DDiD,CAAwBvC,GC1ExBkD,MARf,WACE,OACE3F,EAAAC,EAAAC,cAAA,OAAKwD,UAAU,OACX1D,EAAAC,EAAAC,cAAC0F,EAAD,QCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOnG,EAAAC,EAAAC,cAACkG,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.40b5dedf.chunk.js","sourcesContent":["export default [\n                [\n                    { type: 'string', id: 'Stream' },\n                    { type: 'string', id: 'Story' },\n                    { type: 'date', id: 'Start' },\n                    { type: 'date', id: 'End' },\n                ],\n                ['Abhijit', 'DOP-1035',new Date(2019,6,11), new Date(2019,6,16) ],\n                ['Varun', 'DOP-1034',new Date(2019,6,11), new Date(2019,6,16) ],\n                ['Prathamesh', 'DOP-1038',new Date(2019,6,11), new Date(2019,6,25) ],\n                ['Prathamesh', 'DOP-1036',new Date(2019,6,15), new Date(2019,6,17) ],\n                ['Abhijit', 'DOP-1037',new Date(2019,6,17), new Date(2019,6,19) ],\n                ['Prathamesh', 'DOP-1029',new Date(2019,6,11), new Date(2019,6,12) ],\n                ['Anchal', 'DOP-1002',new Date(2019,6,11), new Date(2019,6,15) ],\n                ['Anchal', 'DOP-1000',new Date(2019,6,16), new Date(2019,6,19) ],\n                ['Varun', 'DOP-1022',new Date(2019,6,17), new Date(2019,6,19) ],\n                ['Prathamesh', 'DOP-1040',new Date(2019,6,17), new Date(2019,6,22) ],\n                ['Neha', 'DOP-1001',new Date(2019,6,11), new Date(2019,6,19) ],\n            ]","import Chart from 'react-google-charts';\nimport React from 'react';\nimport sprintData from './sprint-data';\n\nexport default class SprintPlanChart extends React.PureComponent {\n    render() {\n        return <Chart\n            width={'1200px'}\n            height={'300px'}\n            chartType=\"Timeline\"\n            loader={<div>Loading Chart</div>}\n            data={sprintData}\n            options={{\n                timeline: { groupByRowLabel: true },\n                hAxis: {\n                    format: 'd/M'\n                },\n                width: 1200\n            }}\n            rootProps={{ 'data-testid': '1' }}\n        />\n    }\n}","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default class CreateSprintDialog extends React.Component {\n    render() {\n        return (\n            <div>\n                <Dialog open={this.props.open} onClose={this.props.handleClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Subscribe</DialogTitle>\n                    <DialogContent>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"sprintName\"\n                            label=\"Sprint Name\"\n                            fullWidth\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.props.handleCancel} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button onClick={this.props.handleSave} color=\"primary\">\n                            Save\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport SprintPlanChart from \"./SprintPlanChart\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport CreateSprintDialog from \"./CreateSprintDialog\";\n\nconst themeStyles = ({ palette, spacing }) => ({\n    root: {\n        flexGrow: 1,\n    },\n    fabButton: {\n        position: 'absolute',\n        zIndex: 1,\n        top: 50,\n        right: 15,\n        margin: '0 auto',\n    },\n    paper: {\n        padding: spacing(2),\n        textAlign: 'center',\n        color: palette.text.secondary,\n        margin: 20\n    },\n});\n\nclass Dashboard extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = { openCreateSprintDialog: false };\n        this.onAddClick = this.onAddClick.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n    }\n\n    onAddClick() {\n        this.setState( { openCreateSprintDialog: true } )\n    }\n\n    handleCancel() {\n        this.setState( { openCreateSprintDialog: false } )\n    }\n\n\n    handleSave() {\n        this.setState( { openCreateSprintDialog: false } )\n    }\n\n    render() {\n        const { classes } = this.props;\n        console.log(classes.root);\n        return <div className={classes.root}>\n            <AppBar position=\"static\" color=\"default\">\n                <Toolbar>\n                    <Typography variant=\"h6\" color=\"inherit\">\n                        Sprint Planner\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n\n            <Grid container spacing={3}>\n                <Fab color=\"secondary\" aria-label=\"Add\" onClick={this.onAddClick} className={classes.fabButton}>\n                    <AddIcon />\n                </Fab>\n\n                <Grid item xs={12} alignItems={\"center\"} justify=\"center\" direction=\"row\">\n                    <Paper className={classes.paper}>\n                        <SprintPlanChart/>\n                    </Paper>\n                </Grid>\n\n            </Grid>\n            <CreateSprintDialog\n                open={this.state.openCreateSprintDialog}\n                handleCancel={this.handleCancel}\n                handleSave={this.handleSave}\n            />\n        </div>\n    }\n}\n\nexport default withStyles(themeStyles)(Dashboard)","import React from 'react';\nimport './App.css';\nimport Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Dashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}